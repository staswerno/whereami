{"version":3,"sources":["data.js","Locator.js","App.js","index.js"],"names":["tempObj","ip","location","country","region","city","lat","lng","postalCode","timezone","geonameId","domains","as","asn","name","route","domain","type","isp","tempFacts","topLevelDomain","alpha2Code","alpha3Code","callingCodes","capital","altSpellings","subregion","population","latlng","demonym","area","gini","timezones","borders","nativeName","numericCode","currencies","code","symbol","languages","iso639_1","iso639_2","translations","br","de","es","fa","fr","hr","it","ja","nl","pt","flag","regionalBlocs","acronym","cioc","Locator","locData","locFacts","mapUrl","process","dt","DateTime","now","console","log","year","Grid","container","spacing","mt","justifyContent","alignItems","item","Paper","elevation","sx","height","width","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","Popup","Card","square","CardMedia","component","image","alt","CardContent","Typography","gutterBottom","variant","textAlign","color","month","day","hour","minute","second","App","useState","isLoading","isError","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.287950b3.chunk.js","sourcesContent":["const tempObj = {\n  ip: \"92.195.106.255\",\n  location: {\n    country: \"DE\",\n    region: \"Land Berlin\",\n    city: \"Berlin\",\n    lat: 52.52437,\n    lng: 13.41053,\n    postalCode: \"10967\",\n    timezone: \"+01:00\",\n    geonameId: 2950159,\n  },\n  domains: [\"daschaffert.ddns.net\", \"port-92-195-107-219.dynamic.as20676.net\"],\n  as: {\n    asn: 20676,\n    name: \"PLUSNET\",\n    route: \"92.195.0.0/17\",\n    domain: \"http://www.plusnet.de\",\n    type: \"NSP\",\n  },\n  isp: \"Plusnet GmbH\",\n};\n\nconst tempFacts = {\n  name: \"Germany\",\n  topLevelDomain: [\".de\"],\n  alpha2Code: \"DE\",\n  alpha3Code: \"DEU\",\n  callingCodes: [\"49\"],\n  capital: \"Berlin\",\n  altSpellings: [\n    \"DE\",\n    \"Federal Republic of Germany\",\n    \"Bundesrepublik Deutschland\",\n  ],\n  region: \"Europe\",\n  subregion: \"Western Europe\",\n  population: 81770900,\n  latlng: [51, 9],\n  demonym: \"German\",\n  area: 357114,\n  gini: 28.3,\n  timezones: [\"UTC+01:00\"],\n  borders: [\"AUT\", \"BEL\", \"CZE\", \"DNK\", \"FRA\", \"LUX\", \"NLD\", \"POL\", \"CHE\"],\n  nativeName: \"Deutschland\",\n  numericCode: \"276\",\n  currencies: [\n    {\n      code: \"EUR\",\n      name: \"Euro\",\n      symbol: \"€\",\n    },\n  ],\n  languages: [\n    {\n      iso639_1: \"de\",\n      iso639_2: \"deu\",\n      name: \"German\",\n      nativeName: \"Deutsch\",\n    },\n  ],\n  translations: {\n    br: \"Alemanha\",\n    de: \"Deutschland\",\n    es: \"Alemania\",\n    fa: \"آلمان\",\n    fr: \"Allemagne\",\n    hr: \"Njemačka\",\n    it: \"Germania\",\n    ja: \"ドイツ\",\n    nl: \"Duitsland\",\n    pt: \"Alemanha\",\n  },\n  flag: \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fflagdom.com%2Fflag-resources%2Fflag-images%2Finternational%2Fgermany%2Fgermany-flag_3000x1800.png\",\n  regionalBlocs: [\n    {\n      acronym: \"EU\",\n      name: \"European Union\",\n    },\n  ],\n  cioc: \"GER\",\n};\n\nexport { tempObj, tempFacts };\n","import { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"./App.css\";\nimport {\n  Typography,\n  Grid,\n  Paper,\n  Card,\n  CardMedia,\n  CardContent,\n} from \"@mui/material\";\nimport { DateTime } from \"luxon\";\n\nexport default function Locator({ locData, locFacts }) {\n  const mapUrl = `https://api.mapbox.com/styles/v1/staswerno/ckwul5ede58pt14mkqz1m37et/tiles/256/{z}/{x}/{y}@2x?access_token=${process.env.REACT_APP_MAPBOX_API}`;\n  const dt = DateTime.now();\n  console.log(dt.year);\n\n  return (\n    <Grid\n      container\n      spacing={3}\n      mt={1}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item>\n        <Paper\n          elevation={6}\n          sx={{\n            height: 325,\n            width: 325,\n          }}\n        >\n          <MapContainer\n            center={[locData.location.lat, locData.location.lng]}\n            zoom={13}\n            scrollWheelZoom={false}\n          >\n            <TileLayer\n              attribution='&copy; <a href=\"https://www.mapbox.com/about/maps/\">Mapbox</a>'\n              url={mapUrl}\n            />\n\n            <Marker position={[locData.location.lat, locData.location.lng]}>\n              <Popup>You are here.</Popup>\n            </Marker>\n          </MapContainer>\n        </Paper>\n      </Grid>\n\n      <Grid item>\n        <Card sx={{ width: 325, height: 325 }} elevation={6} square>\n          <CardMedia\n            component=\"img\"\n            height=\"140\"\n            image={locFacts.flag}\n            alt=\"flag\"\n          />\n          <CardContent>\n            <Typography\n              gutterBottom\n              variant=\"h6\"\n              component=\"div\"\n              textAlign=\"center\"\n            >\n              Your IP is {locData.ip}\n            </Typography>\n            <Typography\n              gutterBottom\n              variant=\"body1\"\n              color=\"text.secondary\"\n              textAlign=\"center\"\n            >\n              You are in <strong>{locData.location.city},</strong>{\" \"}\n              <strong>{locFacts.name}</strong>. <br />\n              Which is in <strong>{locFacts.region}</strong> btw.{\" \"}\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              color=\"text.secondary\"\n              textAlign=\"center\"\n            >\n              You requested this information on: <br />{\" \"}\n              <strong>\n                {dt.year}/{dt.month}/{dt.day}\n                <br />\n                {dt.hour}:{dt.minute}:{dt.second}\n              </strong>\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { tempObj, tempFacts } from \"./data\";\nimport Locator from \"./Locator\";\nimport \"./App.css\";\nimport { Typography } from \"@mui/material\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false); //change when update to api\n  const [isError, setIsError] = useState(false);\n  const [locData, setLocData] = useState(tempObj);\n  const [locFacts, setLocFacts] = useState(tempFacts);\n\n  // const url = `https://geo.ipify.org/api/v2/country,city?apiKey=${process.env.REACT_APP_API_KEY}`;\n\n  // useEffect(() => {\n  //   setIsError(false);\n  //   fetch(url)\n  //     .then((response) => response.json())\n  //     .then((json) => {\n  //       setIsLoading(false);\n  //       setLocData(json);\n  //     })\n  //     .catch(() => setIsError(true));\n  // }, []);\n\n  // useEffect(() => {\n  //   if (Object.keys(locData).length > 0) {\n  //     console.log(locData.location.country);\n  //     const alphaCode = locData.location.country;\n  //     const url2 = `http://api.countrylayer.com/v2/alpha/${alphaCode}?access_key=${process.env.REACT_APP_COUNTRYLAYER_API_KEY}`;\n  //     setIsError(false);\n  //     fetch(url2)\n  //       .then((response) => response.json())\n  //       .then((json) => {\n  //         setIsLoading(false);\n  //         setLocFacts(json);\n  //       })\n  //       .catch(() => setIsError(true));\n  //   }\n  // }, [locData]);\n\n  console.log(locData.location.lat);\n\n  const getContent = () => {\n    if (isError) {\n      return (\n        <div>\n          <Typography>\n            something went wrong :( the api may have reached its request limit\n          </Typography>\n        </div>\n      );\n    }\n    if (isLoading) {\n      return (\n        <div>\n          <Typography>loading</Typography>\n        </div>\n      );\n    }\n\n    return <Locator locData={locData} locFacts={locFacts} />;\n  };\n\n  return <div className=\"App\">{getContent()}</div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}