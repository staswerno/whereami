{"version":3,"sources":["Locator.js","App.js","index.js"],"names":["Locator","locData","locFacts","mapUrl","process","dt","DateTime","now","lowAlpha","location","country","toLowerCase","flagUrl","console","log","year","Grid","container","spacing","mb","mr","justifyContent","alignItems","item","Paper","elevation","sx","height","width","MapContainer","center","lat","lng","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","Popup","Card","square","CardMedia","component","image","alt","CardContent","Typography","gutterBottom","variant","textAlign","ip","color","city","name","region","month","day","hour","minute","second","App","useState","isLoading","setIsLoading","isError","setIsError","setLocData","setLocFacts","useEffect","fetch","then","response","json","catch","Object","keys","length","alphaCode","url2","className","m","Link","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f3c551e.chunk.js","sourcesContent":["import { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"./App.css\";\nimport {\n  Typography,\n  Grid,\n  Paper,\n  Card,\n  CardMedia,\n  CardContent,\n} from \"@mui/material\";\nimport { DateTime } from \"luxon\";\n\nexport default function Locator({ locData, locFacts }) {\n  const mapUrl = `https://api.mapbox.com/styles/v1/staswerno/ckwul5ede58pt14mkqz1m37et/tiles/256/{z}/{x}/{y}@2x?access_token=${process.env.REACT_APP_MAPBOX_API}`;\n  const dt = DateTime.now();\n\n  const alphaCode = locData.location.country;\n  const lowAlpha = alphaCode.toLowerCase();\n  const flagUrl = `https://flagcdn.com/w320/${lowAlpha}.jpg`;\n\n  console.log(dt.year);\n  console.log(flagUrl);\n\n  return (\n    <Grid\n      container\n      spacing={3}\n      mb={4}\n      mr={1}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item>\n        <Paper\n          elevation={6}\n          sx={{\n            height: 325,\n            width: 325,\n          }}\n        >\n          <MapContainer\n            center={[locData.location.lat, locData.location.lng]}\n            zoom={13}\n            scrollWheelZoom={false}\n          >\n            <TileLayer\n              attribution='&copy; <a href=\"https://www.mapbox.com/about/maps/\">Mapbox</a>'\n              url={mapUrl}\n            />\n\n            <Marker position={[locData.location.lat, locData.location.lng]}>\n              <Popup>You are here.</Popup>\n            </Marker>\n          </MapContainer>\n        </Paper>\n      </Grid>\n\n      <Grid item>\n        <Card sx={{ width: 325, height: 325 }} elevation={6} square>\n          <CardMedia component=\"img\" height=\"160\" image={flagUrl} alt=\"flag\" />\n          <CardContent>\n            <Typography\n              gutterBottom\n              variant=\"h6\"\n              component=\"div\"\n              textAlign=\"center\"\n            >\n              Your IP is {locData.ip}\n            </Typography>\n            <Typography\n              gutterBottom\n              variant=\"body1\"\n              color=\"text.secondary\"\n              textAlign=\"center\"\n            >\n              You are in <strong>{locData.location.city},</strong>{\" \"}\n              <strong>{locFacts.name}</strong>. <br />\n              Which is in <strong>{locFacts.region}</strong> btw.{\" \"}\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              color=\"text.secondary\"\n              textAlign=\"center\"\n            >\n              You requested this information on: <br />{\" \"}\n              <strong>\n                {dt.year}/{dt.month}/{dt.day}\n              </strong>{\" \"}\n              at{\" \"}\n              <strong>\n                {dt.hour}:{dt.minute}:{dt.second}\n              </strong>\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { tempObj, tempFacts } from \"./data\";\nimport Locator from \"./Locator\";\nimport \"./App.css\";\nimport { Typography, Paper, Link } from \"@mui/material\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true); //change when update to api\n  const [isError, setIsError] = useState(false);\n  const [locData, setLocData] = useState({});\n  const [locFacts, setLocFacts] = useState({});\n\n  const url = `https://geo.ipify.org/api/v2/country,city?apiKey=${process.env.REACT_APP_API_KEY}`;\n\n  useEffect(() => {\n    setIsError(false);\n    fetch(url)\n      .then((response) => response.json())\n      .then((json) => {\n        setLocData(json);\n        setIsLoading(false);\n      })\n      .catch(() => setIsError(true));\n  }, []);\n\n  useEffect(() => {\n    if (Object.keys(locData).length > 0) {\n      console.log(locData);\n      console.log(locData.location.country);\n      const alphaCode = locData.location.country;\n      const url2 = `http://api.countrylayer.com/v2/alpha/${alphaCode}?access_key=${process.env.REACT_APP_COUNTRYLAYER_API_KEY}`;\n      setIsError(false);\n      fetch(url2)\n        .then((response) => response.json())\n        .then((json) => {\n          setIsLoading(false);\n          setLocFacts(json);\n        })\n        .catch(() => setIsError(true));\n    }\n  }, [locData]);\n\n  // console.log(locData.location.lat);\n\n  const getContent = () => {\n    if (isError) {\n      return (\n        <div>\n          <Paper>\n            <Typography m={4} textAlign=\"center\">\n              the api has reached its request limit <br />\n              <Link href=\"https://staswerno.github.io/whereami_local/\">\n                check out a version of this website using local data\n              </Link>\n            </Typography>\n          </Paper>\n        </div>\n      );\n    }\n    if (isLoading) {\n      return (\n        <div>\n          <Paper>\n            <Typography m={4}>loading</Typography>\n          </Paper>\n        </div>\n      );\n    }\n\n    return <Locator locData={locData} locFacts={locFacts} />;\n  };\n  console.log(\"65\", locData);\n  return <div className=\"App\">{getContent()}</div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}